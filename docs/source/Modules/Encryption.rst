Encryption
==========

Last Updated: v1.4.15

.. note::
    External module required!!!
    If you wish to use this module, please go and download `Cryptography`_. Otherwise this module is useless.
    Use `pip install PythonFunctions[encryption]` to get the required modules.

.. note::
    This will not work on some devices due to the requirements required. This is not our falut but something to do with `Cryptography`_.

.. _Cryptography: https://pypi.org/project/cryptography/

An easier class to encrypt and decrypt data, just some simple functions

.. code-block:: python
    
    from PythonFunctions.Encryption import Encryption

GetKey
------

.. py:function:: Encryption.GetKey()
    :noindex:

    Using Fernet, makes and returns a key for you. If you loose this key you are 99% gaurenteed to be locked out of your data.

    :returns: Your key
    :rtype: bytes

.. code-block:: python

    from PythonFunctions.Encryption import Encryption
    print(Encryption.GetKey())  # Returns your key

.. note::
    When decrypting, if the wrong key is used. `cryptography.fernet.InvalidToken` will be raised

EncryptData
-----------

.. py:function:: Encryption.EncryptData(data, key)
    :noindex:

    Using your key, encrypts the data and returns it.

    :param data: The data to encrypt
    :param key: The key to encrypt the data with (generated by `Encryption.GetKey()`)
    :type data: any
    :type key: bytes
    :returns: The encrypted data
    :rtype: bytes

.. note::
    Even though the data is any, it will be encoded using `utf-8` into bytes first.

.. code-block:: python

    from PythonFunctions.Encryption import Encryption
    print(Encryption.EncryptData("Hello World", key)) # Some kind of weird byte mess

DecryptData
-----------

.. py:function:: Encryption.DecryptData(data, key)
    :noindex:

    Using your key, decrypts the data and retuns it

    :param data: The encrypted data
    :param key: The key to decrypt the data (Same one used to encrypt it)
    :type data: bytes
    :type key: bytes
    :returns: The decrypted data
    :rtype: any

.. code-block:: python

    from PythonFunctions.Encryption import Encryption
    print(Encryption.DecryptData(data, key)) # "Hello World"

encrypt
-------

.. py:function:: Encryption.encrypt(data, key, *, filename="encrypted")
    :noindex:

    :param data: The data to save + encrypt
    :param key: The key to encrypt the data with
    :param filename: Optional, where to save the data to. (Defaults to `encrypted`)
    :type data: any
    :type key: bytes
    :type filename: str
    :returns: What happened
    :rtype: str

.. code-block:: python

    from PythonFunctions.Encryption import Encryption
    Encryption.encrypt("Hello World", key, filename="Secret") # Saves the encrypted version of "Hello World" to "Secret"


decrypt
-------

.. py:function:: Encryption.decrypt(key, *, filename="encrypted")
    :noindex:

    :param key: The key to decrypt the data with
    :param filename: Optional, where to load the data from. (Defaults to `encrypted`)
    :type key: bytes
    :type filename: str
    :returns: What happened
    :rtype: str

.. code-block:: python

    from PythonFunctions.Encryption import Encryption
    Encryption.decrypt(key, filename="Secret") # "Hello World" (if same key is used)