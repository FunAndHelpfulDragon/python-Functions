Save (Version 2)
================

A system to easly write, read, delete data. with support of multiple file systems and encryption levels.

.. code-block:: python

    from src.PythonFunctions import save
    sv = save()

.. note::
    Multiple types of file systems are supported!
    More information about them later

Functions
---------

.. note::
    It does not matter what os you are on, if you use `/` or `\\` it will still be translated and works for any os.

DriveExists
^^^^^^^^^^^

.. py:function:: DriveExists()
    :noindex:

    Checks if `gCred.json` is found within the local storage

    :returns: If it is found
    :rtype: bool

.. code-block:: python

    print(sv.DriveExists())

DriveCredentials
^^^^^^^^^^^^^^^^

.. py:function:: DriveCredentials(path, mode)
    :noindex:

    Copies and deletes drive credentials file.

    :param path: The path where the file is
    :param mode: What to do
    :type path: str
    :type mode: DriveCredentialsMode
    :returns: Information about what happened
    :rtype: str
    :raise AttributeError: Invalid mode
    :raise AttributeError: Can't find `gCred.json` under path

.. code-block:: python

    sv.DriveCredentials(".", sv.DriveCredentialsMode.ADD)

Save
^^^^

.. py:function:: Save(data, path, encoding)
    :noindex:

    Save the specified data to a file (path) with the specified encoding

    :param data: The data to save
    :type data: any
    :param path: The location to save to
    :type path: str
    :param encoding: (Optional) The levels of encoding to apply to the data
    :type encoding: List[encoding] | encoding
    :returns: Information to do with the saving
    :rtype: bool | str | dict

.. code-block:: python

    sv.Save("Hello World", "Example.txt")

Read
^^^^

.. py:function:: Read(path, encoding)
    :noindex:

    Returns what the file contains after going through the specified encoding

    :param path: The path to read from
    :type path: str
    :param encoding: The encoding to apply to the file
    :type encoding: List[encoding] | encoding
    :returns: The data stored in the file
    :rtype: any 

.. code-block:: python

    data = sv.Read("Example.txt")

MakeFolders
^^^^^^^^^^^

.. py:function:: MakeFolders(path)
    :noindex:

    Make a folder, or folders following the path given.

    :param path: The folders to make
    :type path: str
    :returns: The path of the folders
    :rtype: str | dict | None

.. code-block:: python

    path = sv.MakeFolders("Test/a/b/c/d")

RemoveFile
^^^^^^^^^^

.. py:function:: RemoveFile(path)
    :noindex:

    Remove path

    :param path: File to remove
    :type path: str
    :returns: Information about deletion
    :rtype: str | bool | None

.. code-block:: python

    sv.RemoveFile("Test/a/b/test.txt")

RemoveFolder
^^^^^^^^^^^^

.. py:function:: RemoveFolder(path)
    :noindex:

    Remove the folder and all subfolders / paths

    :param path: Parent folder to remove
    :type path: str
    :returns: Information about deletion
    :rtype: str | bool | None

.. code-block:: python

    sv.RemoveFolder("Test")

ChangePasscode
^^^^^^^^^^^^^^

.. note::
    Changing your Passcode will lock you out of your encrypted data,
    please make sure to decrypt and save it before changing your passcode.

    The passcode is also randomlly generated by the `Encryption` module

.. py:function:: ChangePasscode()
    :noindex:

    Changes the stored passcode to a new random value

    :returns: The new passcode
    :rtype: bytes

.. code-block:: python

    passcode = sv.ChangePasscode()

File System support
-------------------

This module doesn't just support the default file system, instead it supports way more (and custom ones)

.. note::
    Other than the ones provided, new ones are probably never going to be added or maintaied by me.

.. note::
    If you want one to be in this module, submit a pull request. However you are going to have to maintain it.


Prefixs
^^^^^^^

To call upon a different file system, we use a different prefix before the path.
This tells the class which file system we want to use.

The prefixes are as followed:

- `gdr://` (google drive)
- `ftp://` (File transfer protocol)
- `oth://` (Other, custom)

.. note::
    If the required modules aren't installed then some of these file systems might not work

Depending on the file system, you might have to provide more information, which will be listed below.

ftp (File Transfer Protocol)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The ftp system requires a bit more information before you can provide the path.
After which, it will ask for some details before actually getting to the path.

.. note::
    I belive this is using the insecure version of ftp because i don't know if there is a secure module out there.
    Please only use this on your local network and not some kind of big private company network.

Example of ftp file:
`ftp://192.168.120.1:21/Hi.txt`

- `ftp://` Tells the script the file system
- `192.168.120.1` Tells the script the IP to connect to
- `:21` Tells the script the port to connect to (Default: 21, so not needed for default)
- `Hi.txt` and after, tells the script the file to interact with.

.. note::
    On program start, the first time you call the server to do anything you will be asked to check your username and enter your password.
    You can't switch servers unless the other server has the same username and surname as the first server or you change your information.

gdr (Google Drive API)
^^^^^^^^^^^^^^^^^^^^^^

Google drive api takes a bit more setup other than installing the module. Some of which i can not automate.
I could set up a default one but i don't want to because then i have to handle it and everyone will share the same data.

To set up google drive api follow these steps:

1. Go to https://console.cloud.google.com/
2. Make a new project
3. go to https://console.cloud.google.com/apis/enableflow?apiid=drive.googleapis.com and follow the steps
4. go to https://console.cloud.google.com/apis/credentials
5. Create Credentials -> OAuth client ID.
    - Application type -> Desktop app
    - Name (anything you want, something useful though)
    - Create
6. Download json file provided, rename to `gCred.json`
7. Place `gCred.json` in the folder with the program.
8. Run the program (It should open your browser and ask for you to sign in one first time use.)
    - Make sure to run `sv.Drivecredentials()` beforehand, If you don't want to always run it, check using `sv.DriveExists()`


.. note::
    GOOGLE NOTES:

    Even now and again you will need to reverify, this is a google thing not me.
    It is super easy to do though.  

    If google is saying you don't have access, add yourself as a tester.
    Go to: https://console.cloud.google.com/apis/credentials/consent. Scroll down until you see `Test users`. Add User, enter you email and save.

oth (Other)
^^^^^^^^^^^

This prefix is mainly for your own custom file system. You can make one and use it by this command.

.. note::
    Please follow this `template`_ otherwise you will run into some errors whilst using it.

.. _template: https://github.com/FunAndHelpfulDragon/python-Functions/blob/main/src/PythonFunctions/SaveModules/template.py

The first time you call that file in that class, you will be asked to provide the path.

encoding
--------

As well as multiple file system supports, there is also supports for the following encoding

- None
- Json 
- Binary
- Cryptography
- CSV

When passing in an encoding argument, it can either be a list or one value and will be treated left to right. (Except for decoding which will treat right to left)

.. note::
    If you pass in the arguments in the wrong order, you are going to run into issues.
    The order to pass them in is the same order as you did when you saved it.

To get an encoding value, use the enum provided.

.. code-block:: python
    
    from PythonFunctions import Save
    binary = Save.Encoding.BINARY

CSV encoding
^^^^^^^^^^^^

CSV encoding is handled differently so requires it's own little section here.
To use this format, you need to pass in a dictionary as the data with no other encoding before hand. This has to be the first thing encoded.
The dictionary must contain these values: `header` and `rows`

`header` must be of type list
`rows` must also be of type list with sub dictionaries with all of the headers and fields in them.

Example:

.. code-block:: python

    csvItems = {
        "header": ["name", "test"],
        "rows": [
            {
                "name": "Save",
                "test": "Making sure stuff saves correctly"
            },
            {
                "name": "Clean",
                "test": "Cleaning out a folder to only have the stuff you want"
            }
        ]
    }

If not provided in this format, then it will not work.
