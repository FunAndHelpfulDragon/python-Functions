"""Board generation and display

Functions:
- CreateBoard
- DisplayBoard
"""

import typing
import shutil
import string

from colorama import Fore, Style
from .Colours import Format


def CreateBoard(
    x_len: int, y_len: int, *, value: str = "-"
) -> typing.List[typing.List]:
    """Create a 2D array that is like a board

    Args:
        x (int): The width
        y (int): the height
        value (str, optional): What to fill in the board with. Defaults to '-'.

    Returns:
        typing.List[typing.List]: The array result
    """
    board = []
    for _ in range(y_len):  # Y size (height)
        x_Grid = []
        for _ in range(x_len):  # X size (width)
            x_Grid.append(value)
        board.append(x_Grid)
    return board


def __TranslateNumber(number: int, letters: str) -> str:
    lettersList = list(string.ascii_letters)
    letters += Format.UNDERLINE
    for i in range(number):
        if i < len(lettersList):
            letters += lettersList[i]
            continue
        letters += ' '
    letters += Format.RESET

    return letters


def __getSeperator(index, board):
    return ' ' * (len(str(len(board))) - (len(str(index)) - 1))


def DisplayBoard(
    board: typing.List[typing.List], *, colourInfo: typing.DefaultDict = None,
    coords: bool = False
):
    """Displays the inputted board

    Args:
        board (typing.List[typing.List]): The board (2D array) to show
        colourInfo (dict, optional): The colour info of the grid.
        coords (bool, optional): Whever to show the coordinates on the outside. 
        (Max x:52,y:inf)
    """
    print(__TranslateNumber(len(board[0]), f' {__getSeperator(0, board)}'))
    for y, y_Index in enumerate(board):
        if coords:
            print(f'{y + 1}{__getSeperator(y + 1, board)}', end='')
        for x_Index in y_Index:
            if colourInfo is not None:
                print(f"{colourInfo.get(x_Index)}{x_Index}{Style.RESET_ALL}",
                      end="")
            else:
                print(x_Index, end="")
        print()


# This functions was generated by Chatgpt 3.5 on 07/04/23
def MultiBoardDisplay(*boards: typing.List[typing.List[str]],
                      symbol_color_dict: typing.DefaultDict = None) -> str:
    """Display multiple 2D boards side by side in the terminal, with symbols coloured by a
    specified dictionary of mappings.

    Args:
        *boards (List[List[str]]): Variable-length list of 2D boards
        symbol_color_dict (DefaultDict, optional): Dictionary that maps symbol names to terminal
        colour codes (colorama.Fore). Defaults to None.

    Returns:
        str: String containing coloured boards, displayed side by side in the terminal.
    """
    # Makes a default dictionary to avoid .get issues later
    if symbol_color_dict is None:
        symbol_color_dict = {}

    # Determine the size of each board
    board_size = len(boards[0][0])

    # Determine the maximum number of columns that can fit on a single line
    max_cols = shutil.get_terminal_size().columns // (board_size * 2 + 2)

    # Initialize an empty list to hold the colored board rows
    colored_board_rows = []

    # Loop over each group of max_cols columns
    for col_group in range(0, len(boards[0]), max_cols):
        # Initialize an empty list to hold the colored rows of each board
        colored_rows = [[] for _ in range(board_size)]

        # Loop over each row of boards
        for row in boards:
            # Loop over each board in the current column group
            for board in row[col_group:col_group+max_cols]:
                # Loop over each row of the board
                for j, row in enumerate(board):
                    # Color the symbols in the row according to the symbol_color_dict
                    colored_row = [symbol_color_dict.get(
                        symbol, Fore.WHITE) + symbol + Style.RESET_ALL for symbol in row]
                    # Append the colored row to the list of colored rows
                    colored_rows[j].append(colored_row)

        # Loop over the colored rows and join them together into strings
        for _, colored_row in enumerate(colored_rows):
            colored_board_row = '  '.join(
                [''.join(row) for row in colored_row])
            # Append the colored board row to the list of colored board rows
            colored_board_rows.append(colored_board_row)

        # Append a blank line to separate the column groups
        colored_board_rows.append('')

    # Join the colored board rows together into a single string and return it
    return '\n'.join(colored_board_rows)


if __name__ == "__main__":
    brd = CreateBoard(3, 3, value="+")
    DisplayBoard(brd, colourInfo={"+": "y"})
